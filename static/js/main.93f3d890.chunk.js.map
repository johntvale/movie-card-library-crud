{"version":3,"sources":["components/Loading.js","components/MovieCard.js","services/movieData.js","services/movieAPI.js","pages/MovieList.js","components/MovieForm.js","pages/NewMovie.js","pages/MovieDetails.js","pages/EditMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Loading","className","Component","MovieCard","movie","this","props","title","storyline","id","imagePath","data-testid","src","alt","to","React","movies","subtitle","rating","bookmarked","genre","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","simulateRequest","response","callback","setTimeout","getMovies","Promise","resolve","getMovie","movieId","find","mov","parseInt","MovieList","LoadingAndGettingMovies","bind","state","rendered","a","movieAPI","prom","setState","prevState","map","key","MovieForm","handleSubmit","onSubmit","field","newValue","htmlFor","placeholder","type","value","onChange","event","updateMovie","target","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","NewMovie","redirect","newMovie","movieData","nextId","length","then","MovieDetails","handleClick","match","params","filter","status","backToMain","EditMovie","updatedMovie","NotFound","App","exact","path","component","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.93f3d890.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div className=\"loading\">Carregando...</div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport '../App.css';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, storyline, id, imagePath } = movie;\n    return (\n      <div data-testid=\"movie-card\" className=\"movie-card\">\n        <img src={ imagePath } alt={ title } className=\"movie-card-img\" />\n        <h2 className=\"movie-card-title\">{title}</h2>\n        <div className=\"movie-card-info\">\n          <p>{storyline}</p>\n        </div>\n        <div className=\"movie-card-details-btn\">\n          <Link to={ `/movies/${id}` }>VER DETALHES</Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape(\n    {\n      id: PropTypes.number,\n      title: PropTypes.string,\n      storyline: PropTypes.string,\n      imagePath: PropTypes.string,\n    },\n  ).isRequired,\n};\n\nexport default MovieCard;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Loading from '../components/Loading';\nimport MovieCard from '../components/MovieCard';\nimport '../App.css';\n\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.LoadingAndGettingMovies = this.LoadingAndGettingMovies.bind(this);\n\n    this.state = {\n      rendered: true,\n      movies: [],\n    };\n  }\n\n  async componentDidMount() {\n    const { getMovies } = movieAPI;\n    const prom = await getMovies();\n    this.LoadingAndGettingMovies(prom);\n  }\n\n  LoadingAndGettingMovies(prom) {\n    this.setState((prevState) => (\n      { movies: [...prom],\n        rendered: !prevState.rendered,\n      }\n    ));\n  }\n\n  render() {\n    const { movies, rendered } = this.state;\n\n    // Render Loading here if the request is still happening\n    if (rendered) {\n      return (<Loading />);\n    }\n    return (\n      <div>\n        <div data-testid=\"movie-list\" className=\"movie-list\">\n          {\n            movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />)\n          }\n        </div>\n        <div className=\"movie-list-add-card-btn\">\n          <Link to=\"/movies/new\">ADICIONAR FILME</Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div className=\"form-item\">\n        <label htmlFor=\"movie_title\">\n          Título\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"form-input\"\n            value={ title }\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div className=\"form-item\">\n        <label htmlFor=\"movie_subtitle\">\n          Subtítulo\n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            className=\"form-input\"\n            value={ subtitle }\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"form-item\">\n        <label htmlFor=\"movie_image\">\n          Imagem\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            className=\"form-input\"\n            value={ imagePath }\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div className=\"form-item\">\n        <label htmlFor=\"movie_storyline\">\n          Sinopse\n          <textarea\n            id=\"movie_storyline\"\n            value={ storyline }\n            className=\"form-input\"\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div className=\"form-item\">\n        <label htmlFor=\"movie_genre\">\n          Gênero\n          <select\n            id=\"movie_genre\"\n            value={ genre }\n            className=\"form-input\"\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\n          >\n            <option value=\"action\">Ação</option>\n            <option value=\"comedy\">Comédia</option>\n            <option value=\"thriller\">Suspense</option>\n            <option value=\"fantasy\">Fantasia</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div className=\"form-item\">\n        <label htmlFor=\"movie_rating\">\n          Avaliação\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            className=\"form-input\"\n            type=\"number\"\n            step={ 0.1 }\n            min={ 0 }\n            max={ 5 }\n            value={ rating }\n            onChange={ (event) => this.updateMovie('rating', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div className=\"form-btn\">\n        <button\n          type=\"button\"\n          onClick={ this.handleSubmit }\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form>\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  movie: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default MovieForm;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router';\n\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.state = {\n      redirect: false,\n    };\n  }\n\n  handleSubmit(newMovie) {\n    movieAPI.createMovie(newMovie)\n      .then(() => {\n        this.setState({\n          redirect: true,\n        });\n      });\n  }\n\n  render() {\n    const { redirect } = this.state;\n    if (redirect) return <Redirect to=\"/\" />;\n    return (\n      <div data-testid=\"new-movie\" className=\"form-movie-content\">\n        <MovieForm onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\n// Eu e Guilherme Rodrigues estudamos juntos e recebemos ajuda do Gabriel Lenz gabriellenz-projectMovieCardsCrud.\n\nexport default NewMovie;\n","import React, { Component } from 'react';\n\nimport { Link, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\nimport '../App.css';\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n\n    this.state = {\n      movie: {},\n      rendered: true,\n    };\n  }\n\n  componentDidMount() {\n    const { match: { params: { id } } } = this.props;\n    movieAPI.getMovie(id).then((response) => {\n      this.setState({\n        movie: response,\n        rendered: false,\n      });\n    });\n  }\n\n  handleClick() {\n    const { match: { params: { id } } } = this.props;\n    movieAPI.deleteMovie(id)\n      .then(() => {\n        this.setState({\n          backToMain: true,\n        });\n      });\n  }\n\n  render() {\n    // Change the condition to check the state\n    // if (true) return <Loading />;\n\n    const { movie, rendered, backToMain } = this.state;\n    const { title, storyline, imagePath, genre, rating, subtitle, id } = movie;\n\n    if (rendered) {\n      return (<Loading />);\n    }\n    return (\n      <div data-testid=\"movie-details\" className=\"movie-details-content\">\n        {backToMain && <Redirect to=\"/\" />}\n        <div className=\"movie-details-card\">\n          <img alt=\"Movie Cover\" src={ `../${imagePath}` } />\n          <div className=\"movie-details-card-info\">\n            <p className=\"movie-details-card-title\">{ title }</p>\n            <p className=\"movie-details-card-info-item\">{ `Subtitle: ${subtitle}` }</p>\n            <p className=\"movie-details-card-info-item\">{ `Storyline: ${storyline}` }</p>\n            <p className=\"movie-details-card-info-item\">{ `Genre: ${genre}` }</p>\n            <p className=\"movie-details-card-info-item\">{ `Rating: ${rating}` }</p>\n          </div>\n          <div className=\"movie-details-card-btn\">\n            <Link to=\"/\">VOLTAR</Link>\n            <Link to={ `/movies/${id}/edit` }>EDITAR</Link>\n            <Link to=\"/\" onClick={ this.handleClick }>DELETAR</Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// Eu e Guilherme Rodrigues estudamos juntos e recebemos ajuda do Gabriel Lenz gabriellenz-projectMovieCardsCrud.\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.number,\n    }),\n  }).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport MovieForm from '../components/MovieForm';\nimport Loading from '../components/Loading';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.state = {\n      movie: {},\n      rendered: true,\n    };\n  }\n\n  componentDidMount() {\n    const { match: { params: { id } } } = this.props;\n    movieAPI.getMovie(id).then((response) => {\n      this.setState({\n        movie: response,\n        rendered: false,\n      });\n    });\n  }\n\n  handleSubmit(updatedMovie) {\n    movieAPI.updateMovie(updatedMovie)\n      .then(() => {\n        this.setState({\n          redirect: true,\n        });\n      });\n  }\n\n  render() {\n    const { rendered, redirect, movie } = this.state;\n    if (rendered) return <Loading />;\n    if (redirect) return <Redirect to=\"/\" />;\n\n    return (\n      <div data-testid=\"edit-movie\" className=\"form-movie-content\">\n        <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.number,\n    }),\n  }).isRequired,\n};\n\n// Eu e Guilherme Rodrigues estudamos juntos e recebemos ajuda do Gabriel Lenz gabriellenz-projectMovieCardsCrud.\n\nexport default EditMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport MovieList from './pages/MovieList';\nimport NewMovie from './pages/NewMovie';\nimport MovieDetails from './pages/MovieDetails';\nimport EditMovie from './pages/EditMovie';\nimport NotFound from './pages/NotFound';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/movie-card-library-crud/\" component={ MovieList } />\n        <Route\n          exact\n          path=\"/movies/new\"\n          render={ (props) => <NewMovie { ...props } /> }\n        />\n        <Route\n          exact\n          path=\"/movies/:id\"\n          render={ (props) => <MovieDetails { ...props } /> }\n        />\n        <Route\n          exact\n          path=\"/movies/:id/edit\"\n          render={ (props) => <EditMovie { ...props } /> }\n        />\n        <Route component={ NotFound } />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}